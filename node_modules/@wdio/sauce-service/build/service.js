"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const saucelabs_1 = __importDefault(require("saucelabs"));
const logger_1 = __importDefault(require("@wdio/logger"));
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const jobDataProperties = ['name', 'tags', 'public', 'build', 'custom-data'];
const log = logger_1.default('@wdio/sauce-service');
class SauceService {
    constructor(options, _capabilities, _config) {
        this._capabilities = _capabilities;
        this._config = _config;
        this._testCnt = 0;
        this._maxErrorStackLength = 5;
        this._failures = 0; // counts failures between reloads
        this._isServiceEnabled = true;
        this._isJobNameSet = false;
        this._options = { ...constants_1.DEFAULT_OPTIONS, ...options };
        this._api = new saucelabs_1.default(this._config);
        this._isRDC = 'testobject_api_key' in this._capabilities;
        this._maxErrorStackLength = this._options.maxErrorStackLength || this._maxErrorStackLength;
    }
    /**
     * gather information about runner
     */
    beforeSession() {
        /**
         * if no user and key is specified even though a sauce service was
         * provided set user and key with values so that the session request
         * will fail (not for RDC tho due to other auth mechansim)
         */
        if (!this._isRDC && !this._config.user) {
            this._isServiceEnabled = false;
            this._config.user = 'unknown_user';
        }
        if (!this._isRDC && !this._config.key) {
            this._isServiceEnabled = false;
            this._config.key = 'unknown_key';
        }
    }
    before(caps, specs, browser) {
        this._browser = browser;
        // Ensure capabilities are not null in case of multiremote
        // Changed from `this._browser.capabilities` to this to get the correct
        // capabilities for EMUSIM (with the postfix) to determine ff the string
        // contains `simulator` or `emulator` it's an EMU/SIM session
        // `this._browser.capabilities` returns the process data from Sauce which is without
        // the postfix
        const capabilities = this._browser.requestedCapabilities || {};
        this._isUP = utils_1.isUnifiedPlatform(capabilities);
    }
    beforeSuite(suite) {
        this._suiteTitle = suite.title;
    }
    beforeTest(test) {
        /**
         * Date:    20200714
         * Remark:  Sauce Unified Platform doesn't support updating the context yet.
         */
        if (!this._isServiceEnabled || this._isRDC || this._isUP || !this._browser) {
            return;
        }
        /**
         * in jasmine we get Jasmine__TopLevel__Suite as title since service using test
         * framework hooks in order to execute async functions.
         * This tweak allows us to set the real suite name for jasmine jobs.
         */
        /* istanbul ignore if */
        if (this._suiteTitle === 'Jasmine__TopLevel__Suite') {
            this._suiteTitle = test.fullName.slice(0, test.fullName.indexOf(test.description || '') - 1);
        }
        if (this._browser && !this._isUP && !this._isJobNameSet) {
            this._browser.execute('sauce:job-name=' + this._suiteTitle);
            this._isJobNameSet = true;
        }
        const fullTitle = (
        /**
         * Jasmine
         */
        test.fullName ||
            /**
             * Mocha
             */
            `${test.parent} - ${test.title}`);
        this._browser.execute('sauce:context=' + fullTitle);
    }
    afterSuite(suite) {
        if (Object.prototype.hasOwnProperty.call(suite, 'error')) {
            ++this._failures;
        }
    }
    _reportErrorLog(error) {
        const lines = (error.stack || '').split(/\r?\n/).slice(0, this._maxErrorStackLength);
        lines.forEach((line) => this._browser.execute(`sauce:context=${line.replace(utils_1.ansiRegex(), '')}`));
    }
    afterTest(test, context, results) {
        /**
         * If the test failed push the stack to Sauce Labs in separate lines
         * This should not be done for UP because it's not supported yet and
         * should be removed when UP supports `sauce:context`
         */
        if (results.error && !this._isUP) {
            this._reportErrorLog(results.error);
        }
        /**
         * remove failure if test was retried and passed
         * > Mocha only
         */
        if (test._retriedTest && results.passed) {
            --this._failures;
            return;
        }
        /**
         * don't bump failure number if test was retried and still failed
         * > Mocha only
         */
        if (test._retriedTest &&
            !results.passed &&
            (typeof test._currentRetry === 'number' &&
                typeof test._retries === 'number' &&
                test._currentRetry < test._retries)) {
            return;
        }
        if (!results.passed) {
            ++this._failures;
        }
    }
    afterHook(test, context, results) {
        /**
         * If the test failed push the stack to Sauce Labs in separate lines
         * This should not be done for UP because it's not supported yet and
         * should be removed when UP supports `sauce:context`
         */
        if (results.error && !this._isUP) {
            this._reportErrorLog(results.error);
        }
        if (!results.passed) {
            ++this._failures;
        }
    }
    /**
     * For CucumberJS
     */
    beforeFeature(uri, feature) {
        /**
         * Date:    20200714
         * Remark:  Sauce Unified Platform doesn't support updating the context yet.
         */
        if (!this._isServiceEnabled || this._isRDC || this._isUP || !this._browser) {
            return;
        }
        this._suiteTitle = feature.name;
        if (this._browser && !this._isUP && !this._isJobNameSet) {
            this._browser.execute('sauce:job-name=' + this._suiteTitle);
            this._isJobNameSet = true;
        }
        this._browser.execute('sauce:context=Feature: ' + this._suiteTitle);
    }
    beforeScenario(world) {
        /**
         * Date:    20200714
         * Remark:  Sauce Unified Platform doesn't support updating the context yet.
         */
        if (!this._isServiceEnabled || this._isRDC || this._isUP || !this._browser) {
            return;
        }
        const scenarioName = world.pickle.name || 'unknown scenario';
        this._browser.execute('sauce:context=Scenario: ' + scenarioName);
    }
    /**
     *
     * Runs before a Cucumber Scenario.
     * @param world world object containing information on pickle and test step
     * @param result result object containing
     * @param result.passed   true if scenario has passed
     * @param result.error    error stack if scenario failed
     * @param result.duration duration of scenario in milliseconds
     */
    afterScenario(world, result) {
        // check if scenario has failed
        if (!result.passed) {
            ++this._failures;
        }
    }
    /**
     * update Sauce Labs job
     */
    async after(result) {
        if (!this._browser || (!this._isServiceEnabled && !this._isRDC)) {
            return;
        }
        let failures = this._failures;
        /**
         * set failures if user has bail option set in which case afterTest and
         * afterSuite aren't executed before after hook
         */
        if (this._config.mochaOpts && this._config.mochaOpts.bail && Boolean(result)) {
            failures = 1;
        }
        const status = 'status: ' + (failures > 0 ? 'failing' : 'passing');
        if (!this._browser.isMultiremote) {
            await this._uploadLogs(this._browser.sessionId);
            log.info(`Update job with sessionId ${this._browser.sessionId}, ${status}`);
            return this._isUP ? this.updateUP(failures) : this.updateJob(this._browser.sessionId, failures);
        }
        const mulitremoteBrowser = this._browser;
        return Promise.all(Object.keys(this._capabilities).map(async (browserName) => {
            await this._uploadLogs(mulitremoteBrowser[browserName].sessionId);
            log.info(`Update multiremote job for browser "${browserName}" and sessionId ${mulitremoteBrowser[browserName].sessionId}, ${status}`);
            return this._isUP ? this.updateUP(failures) : this.updateJob(mulitremoteBrowser[browserName].sessionId, failures, false, browserName);
        }));
    }
    /**
     * upload files to Sauce Labs platform
     * @param jobId id of the job
     * @returns a promise that is resolved once all files got uploaded
     */
    async _uploadLogs(jobId) {
        if (!this._options.uploadLogs || !this._config.outputDir) {
            return;
        }
        const files = (await fs_1.default.promises.readdir(this._config.outputDir))
            .filter((file) => file.endsWith('.log'));
        log.info(`Uploading WebdriverIO logs (${files.join(', ')}) to Sauce Labs`);
        return this._api.uploadJobAssets(jobId, { files: files.map((file) => path_1.default.join(this._config.outputDir, file)) }).catch((err) => log.error(`Couldn't upload log files to Sauce Labs: ${err.message}`));
    }
    onReload(oldSessionId, newSessionId) {
        if (!this._browser || (!this._isServiceEnabled && !this._isRDC)) {
            return;
        }
        const status = 'status: ' + (this._failures > 0 ? 'failing' : 'passing');
        if (!this._browser.isMultiremote) {
            log.info(`Update (reloaded) job with sessionId ${oldSessionId}, ${status}`);
            return this.updateJob(oldSessionId, this._failures, true);
        }
        const mulitremoteBrowser = this._browser;
        const browserName = mulitremoteBrowser.instances.filter((browserName) => mulitremoteBrowser[browserName].sessionId === newSessionId)[0];
        log.info(`Update (reloaded) multiremote job for browser "${browserName}" and sessionId ${oldSessionId}, ${status}`);
        return this.updateJob(oldSessionId, this._failures, true, browserName);
    }
    async updateJob(sessionId, failures, calledOnReload = false, browserName) {
        if (this._isRDC) {
            await this._api.updateTest(sessionId, { passed: failures === 0 });
            this._failures = 0;
            return;
        }
        const body = this.getBody(failures, calledOnReload, browserName);
        await this._api.updateJob(this._config.user, sessionId, body);
        this._failures = 0;
    }
    /**
     * VM message data
     */
    getBody(failures, calledOnReload = false, browserName) {
        let body = {};
        /**
         * add reload count to title if reload is used
         */
        if (calledOnReload || this._testCnt) {
            /**
             * set default values
             */
            body.name = this._suiteTitle;
            if (browserName) {
                body.name = `${browserName}: ${body.name}`;
            }
            let testCnt = ++this._testCnt;
            const mulitremoteBrowser = this._browser;
            if (this._browser && this._browser.isMultiremote) {
                testCnt = Math.ceil(testCnt / mulitremoteBrowser.instances.length);
            }
            body.name += ` (${testCnt})`;
        }
        let caps = this._capabilities['sauce:options'] || this._capabilities;
        for (let prop of jobDataProperties) {
            if (!caps[prop]) {
                continue;
            }
            body[prop] = caps[prop];
        }
        body.passed = failures === 0;
        return body;
    }
    /**
     * Update the UP with the JS-executor
     * @param {number} failures
     * @returns {*}
     */
    updateUP(failures) {
        if (!this._browser) {
            return;
        }
        return this._browser.execute(`sauce:job-result=${failures === 0}`);
    }
}
exports.default = SauceService;
